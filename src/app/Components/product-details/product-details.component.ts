import { Component, ElementRef, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import * as bootstrap from 'bootstrap';
import { ToastrService } from 'ngx-toastr';
import { CallApisService } from 'src/app/Services/call-apis.service';

@Component({
  selector: 'app-product-details',
  templateUrl: './product-details.component.html',
  styleUrls: ['./product-details.component.scss']
})
export class ProductDetailsComponent {
  constructor(private router: Router, private callApi: CallApisService, private route: ActivatedRoute, private toastr: ToastrService) { }

  product: any;
  userId: any;
  favouritesList: any[] = []; // ูุตูููุฉ ุชุญุชูู ุนูู ุงูููุชุฌุงุช ุงูููุถูุฉ

  recommendedProducts: any;

  baseUrl: string = "https://localhost:7095"; // ุชุฃูุฏ ูู ูุถุน ุงูู API URL ููุง
  productId: any;
  products: any;
  fullStars: number[] = [];
  emptyStars: number[] = [];

  ngOnInit() {

    this.callApi.getAllProducts().subscribe({
      next: (response) => {
        this.products = response;
        this.recommendedProducts = this.getRandomProducts(response, 3);
        console.log(response);

      }
    })




    this.callApi.getUserId().subscribe({
      next: (response) => {
        this.userId = response.userId;
        this.loadFavourites();

      }
    })
    // this.productId = this.route.snapshot.paramMap.get('id');


    this.route.paramMap.subscribe(params => {
      this.productId = params.get('id');

      if (this.productId) {
        this.loadProductDetails(this.productId);
      }
    });



    if (this.productId) {
      this.callApi.getProductById(+this.productId).subscribe({
        next: (response) => {
          console.log("โ Product Data:", response);
          this.product = response;
          let rating = response.rate ?? 0; // ุฅุฐุง ูุงู null ุฃู undefinedุ ุงุฌุนูู 0
          let roundedRate = Math.round(rating);
          this.fullStars = Array(roundedRate).fill(0);
          this.emptyStars = Array(5 - roundedRate).fill(0);
        },
        error: (error) => {
          console.error("๐จ API Error:", error);
        }
      });
    }
  }


  loadProductDetails(productId: number) {
    this.callApi.getProductById(+productId).subscribe({
      next: (response) => {
        console.log("โ Product Data:", response);
        this.product = response;
        let rating = response.rate ?? 0;
        let roundedRate = Math.round(rating);
        this.fullStars = Array(roundedRate).fill(0);
        this.emptyStars = Array(5 - roundedRate).fill(0);
      },
      error: (error) => {
        console.error("๐จ API Error:", error);
      }
    });

    this.recommendedProducts = this.getRandomProducts(this.products, 3);

  }



  getRandomProducts(products: any[], count: number): any[] {
    let shuffled = [...products].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
  }


  goToDetails(productId: number) {
    console.log("hiiiiiiii");
    console.log(productId);

    this.router.navigate(['/product-details', productId]);
  }


  AddToCart(prodId: number) {
    // event.stopPropagation(); // ููุน ุงูุงูุชูุงู ุฅูู ุตูุญุฉ ุงูุชูุงุตูู ุนูุฏ ุงูููุฑ ุนูู "ุงุถู ุงูู ุงูุณูุฉ"
    const token = localStorage.getItem('Token');
    if (!token) {
      this.router.navigate(['/auth']);
    }

    console.log(prodId);
    const data =
    {
      userId: this.userId,
      productId: prodId,
      quantity: 1
    }

    console.log(data);

    this.callApi.addToCart(data).subscribe({
      next: (response) => {
        console.log(response);
        this.callApi.updateCartCount(this.userId);

        this.toastr.success('ุชู ุฅุถุงูุฉ ุงูููุชุฌ ุฅูู ุงูุณูุฉ ุจูุฌุงุญ!');
      }
    })

  }

  isFavourite(productId: number): boolean {
    return this.favourites.has(productId); // ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงูููุชุฌ ูู ุงูููุถูุฉ
  }

  favourites: Set<number> = new Set(); // ูุชุฎุฒูู ุงูููุชุฌุงุช ุงูููุถูุฉ

  toggleFavourite(productId: number): void {

    const token = localStorage.getItem('Token');
    if (!token) {
      this.router.navigate(['/auth']);
    }



    if (!this.userId) {
      console.error('ุงููุณุชุฎุฏู ุบูุฑ ูุณุฌู ุฏุฎูู.');
      return;
    }

    const favouriteIndex = this.favouritesList.findIndex((fav: { productId: number }) => fav.productId === productId);

    if (favouriteIndex !== -1) {
      // ุญุฐู ูู ุงูููุถูุฉ
      const favouriteIdToDelete = this.favouritesList[favouriteIndex].id;
      this.callApi.removeFromFavourites(favouriteIdToDelete).subscribe({
        next: () => {
          this.favouritesList.splice(favouriteIndex, 1);
          this.updateFavouritesSet();
          console.log('ุชู ุงูุญุฐู ุจูุฌุงุญ:', this.favourites);
          this.callApi.updateWishlistCount(this.userId);

          this.toastr.success('ุชู ุญุฐู ุงูููุชุฌ ูู ุงูููุถูุฉ ุจูุฌุงุญ!');

        },
        error: (err) => console.error('ุฎุทุฃ ูู ุงูุญุฐู:', err)
      });
    } else {
      // ุฅุถุงูุฉ ุฅูู ุงูููุถูุฉ
      this.callApi.addToFavourites(this.userId, productId).subscribe({
        next: (newFavourite: { id: number, productId: number }) => {
          this.favouritesList.push(newFavourite);
          this.updateFavouritesSet();
          console.log('ุชูุช ุงูุฅุถุงูุฉ ุจูุฌุงุญ:', this.favourites);
          this.callApi.updateWishlistCount(this.userId);

          this.toastr.success('ุชู ุฅุถุงูุฉ ุงูููุชุฌ ุฅูู ุงูููุถูุฉ ุจูุฌุงุญ!');

        },
        error: (err) => console.error('ุฎุทุฃ ูู ุงูุฅุถุงูุฉ:', err)
      });
    }
  }


  // ุชุญููู ุงูููุถูุฉ ุนูุฏ ุจุฏุก ุงูุชุดุบูู
  loadFavourites() {
    if (!this.userId) return;

    this.callApi.GetProductFavouriteByUserId(this.userId).subscribe({
      next: (favourites) => {
        this.favouritesList = favourites;
        this.updateFavouritesSet();
      },
      error: (err) => console.error("ุฎุทุฃ ูู ุชุญููู ุงูููุถูุฉ:", err)
    });
  }

  // ุชุญุฏูุซ Set ุจุนุฏ ุงูุชุนุฏูู
  updateFavouritesSet(): void {
    this.favourites = new Set(this.favouritesList.map((fav: { productId: number }) => fav.productId));
  }

  private carousels: { [key: string]: bootstrap.Carousel } = {};

  ngAfterViewInit() {
    setTimeout(() => {
      document.querySelectorAll('.carousel').forEach((carouselElement) => {
        const id = carouselElement.getAttribute('id');
        if (id && !this.carousels[id]) {
          this.carousels[id] = new bootstrap.Carousel(carouselElement, {
            interval: 3000,
            wrap: true
          });
        }
      });
    }, 1000); // ุชุฃุฎูุฑ ููุชุฃูุฏ ูู ุชุญููู ุงูุนูุงุตุฑ
  }

  intervals: { [key: string]: any } = {}; // โ ุชุนุฑูู intervals ูุชุฎุฒูู ุงููุคูุชุงุช

  startCarousel(id: string) {
    console.log('Starting carousel manually:', id);

    if (!this.carousels[id]) {
      const element = document.getElementById(id);
      if (element) {
        this.carousels[id] = new bootstrap.Carousel(element, {
          interval: false, // ููุน ุงูุชุดุบูู ุงูุชููุงุฆู
          wrap: true
        });
      }
    }

    // ุฅุฐุง ูุงู ููุงู ุชุดุบูู ุณุงุจูุ ุงูุณุญูู ุฃููุงู
    if (this.intervals[id]) {
      clearInterval(this.intervals[id]);
    }

    // ุฅูุดุงุก ูุคูุช ููุชุจุฏูู ุจูู ุงูุดุฑุงุฆุญ ูุฏูููุง
    this.intervals[id] = setInterval(() => {
      if (this.carousels[id]) {
        this.carousels[id].next(); // ุงูุงูุชูุงู ููุตูุฑุฉ ุงูุชุงููุฉ
      }
    }, 2000); // ุชุบููุฑ ุงูุดุฑูุญุฉ ูู ุซุงููุชูู (ููููู ุชุนุฏูููุง ุญุณุจ ุงูุญุงุฌุฉ)
  }

  pauseCarousel(id: string) {
    console.log('Pausing and resetting carousel:', id);

    if (this.carousels[id]) {
      this.carousels[id].pause(); // ุฅููุงู ุงูุชูููุจ
      this.carousels[id].to(0); // ุงูุฑุฌูุน ุฅูู ุฃูู ุตูุฑุฉ ููุฑูุง
    }

    // ุฅููุงู ุงููุคูุช ุฅุฐุง ูุงู ููุฌูุฏูุง
    if (this.intervals[id]) {
      clearInterval(this.intervals[id]);
      delete this.intervals[id];
    }
  }

  getPriceAfterDiscount(disc: number, oldPrice: number): number {
    return oldPrice - (oldPrice * (disc / 100));
  }

  getFlvourName(flavorId: number): string {
    return this.TeaFlavorsAr[flavorId] || " ";
  }

  TeaFlavorsAr: string[] = [
    "ุดุงู ุงููุงูุฌู",
    "ุดุงู ุงูุชูุงุญ ูุงููุฑุงููู",
    "ุดุงู ูุฑุงููุฉ ุงูุดููููุงุชุฉ",
    "ุดุงู ุงูุฑูุงู",
    "ุดุงู ุงููุงููุฏุฑ",
    "ุดุงู ุงูุชูุช ุงูุฃุญูุฑ",
    "ุดุงู ุงููุนูุงุน ุงููุบุฑุจู",
    "ุดุงู ุงูุดููููุงุชุฉ ุจุงููุนูุงุน",
    "ุดุงู ุงููุทููุฉ ุงูุฃููู",
    "ุดุงู ุงููุงุณููู ูุงูุจุฑุชูุงู",
    "ุดุงู ุงูููููู ุงูุญูุถู",
    "ุดุงู ุงูููููู ูุงูุนุณู",
    "ุดุงู ุงูุฎูุฎ ุงูุฃุฎุถุฑ",
    "ุดุงู Tranquility",
    "ุดุงู ุงูุชูุงุญ ูุงููุฑูุฉ",
    "ุดุงู ุจูู ุจูุฑู ุจููุฒ",
    "ุดุงู Chai",
    "ุดุงู ุฌูุฒ ุงูููุฏ",
    "ุดุงู ุงูููููู ุจุงูุฌูุฒุจูู",
    "ุดุงู Luscious Lavender",
    "ุดุงู ุงูููุฑููุฌุง ูุงููุฑูู",
    "ุดุงู ุงูุจุงุจููุฌ ูุงูุจุฑุชูุงู",
    "ุดุงู ุงูุฑููุจูุณ ุจุงููุนูุงุน",
    "ุดุงู ุซูุฑ ุงููุฑุฏ ูุงูุฎูุฎ",
    "ุดุงู ุงูููุงูู ุงูุงุณุชูุงุฆูุฉ"
  ];

}
